// Generated by CoffeeScript 1.3.3
(function() {
  var csgToGmsh, exec, fs, gmshSucceedsWith, should, tmp;

  require('../thirdparty/csg');

  exec = require('child_process').exec;

  tmp = require('tmp');

  fs = require('fs');

  should = require('should');

  csgToGmsh = require('./gmsh');

  gmshSucceedsWith = function(geometry, done) {
    return tmp.file({
      postfix: '.geo'
    }, function(err, path, fd) {
      if (err != null) {
        throw err;
      }
      return fs.writeFile(path, geometry, function(err) {
        if (err != null) {
          throw err;
        }
        return exec("gmsh -3 " + path, function(err, stdout, stderr) {
          return fs.unlink("" + path.slice(0, path.length - 4) + ".msh", function(err2) {
            if (err2 != null) {
              throw err2;
            }
            try {
              should.not.exist(err);
              return done();
            } catch (e) {
              return done(e);
            }
          });
        });
      });
    });
  };

  describe('csgToGmsh', function() {
    beforeEach(function() {
      return this.it = csgToGmsh;
    });
    it('supports a cube', function(done) {
      return gmshSucceedsWith(csgToGmsh(CSG.cube()), done);
    });
    it('supports a sphere', function(done) {
      return gmshSucceedsWith(csgToGmsh(CSG.sphere()), done);
    });
    it('supports the union of two concentric cubes', function(done) {
      return gmshSucceedsWith(csgToGmsh(CSG.cube().union(CSG.cube({
        radius: 0.5
      }))), done);
    });
    return it('supports the union of two overlapping cubes', function(done) {
      return gmshSucceedsWith(csgToGmsh(CSG.cube().union(CSG.cube({
        radius: 0.5,
        center: [0, 0, 1]
      }))), done);
    });
  });

}).call(this);
