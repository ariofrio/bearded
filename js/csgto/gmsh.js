// Generated by CoffeeScript 1.3.3
(function() {

  define(["../indexer", "thirdparty/sugar"], function(Indexer) {
    var csgToGmsh;
    return csgToGmsh = function(solid) {
      var data, i, index, key, lineIndexer, lines, name, objects, output, pointIndexer, points, polygon, v, values, _i, _j, _k, _len, _len1, _ref, _ref1;
      data = {
        point: [],
        line: [],
        lineLoop: [],
        planeSurface: [],
        surfaceLoop: [],
        volume: []
      };
      pointIndexer = new Indexer;
      lineIndexer = new Indexer;
      _ref = solid.toPolygons();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        polygon = _ref[_i];
        points = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = polygon.vertices;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (v.pos === void 0) {
              console.log(point, i);
            }
            _results.push(pointIndexer.add([v.pos.x, v.pos.y, v.pos.z]));
          }
          return _results;
        })();
        lines = [];
        lines.push(lineIndexer.add([points[points.length - 1], points[0]]));
        for (i = _j = 1, _ref1 = points.length; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          lines.push(lineIndexer.add([points[i - 1], points[i]]));
        }
        data.planeSurface.push([data.lineLoop.length]);
        data.lineLoop.push(lines);
      }
      data.point = pointIndexer.unique;
      data.line = lineIndexer.unique;
      data.volume.push([data.surfaceLoop.length]);
      data.surfaceLoop.push(data.planeSurface);
      output = [];
      for (key in data) {
        objects = data[key];
        name = key.spacify().capitalize(true);
        for (index = _k = 0, _len1 = objects.length; _k < _len1; index = ++_k) {
          values = objects[index];
          if (key === 'point') {
            values = values.join(', ');
          } else {
            values = values.join(', ');
          }
          output += "" + name + "(" + index + ") = {" + values + "};\n";
        }
      }
      return output;
    };
  });

}).call(this);
