// Generated by CoffeeScript 1.3.3
(function() {

  require(["csgToThreeGeometry", "thirdparty/Three", "thirdparty/csg", "thirdparty/sugar"], function(csgToThreeGeometry) {
    var $, $$, Three, camera, container, controls, fillLight, keyLight, mesh, onresize, placeholder, render, renderer, scene, textarea, update;
    Three = THREE;
    $ = function(query) {
      return document.querySelector(query);
    };
    $$ = function(query) {
      return document.querySelectorAll(query);
    };
    placeholder = "If this is being used, we've got a problem.";
    textarea = $("textarea");
    container = $("#canvas");
    scene = new Three.Scene;
    renderer = new Three.WebGLRenderer;
    container.appendChild(renderer.domElement);
    camera = new Three.PerspectiveCamera(45, placeholder, 0.01, 1000);
    camera.position.set(5, 5, 5);
    scene.add(camera);
    controls = new Three.TrackballControls(camera, container);
    keyLight = new Three.DirectionalLight(0xFFFFFF);
    keyLight.position.set(7, 10, 0);
    scene.add(keyLight);
    fillLight = new Three.DirectionalLight(0x666666);
    fillLight.position.set(0, 4, 7);
    scene.add(fillLight);
    mesh = null;
    update = function() {
      var geometry, solid;
      console.log("update");
      solid = new Function(textarea.value)();
      if (mesh != null) {
        scene.remove(mesh);
      }
      geometry = csgToThreeGeometry(solid);
      mesh = new Three.Mesh(geometry, new Three.MeshLambertMaterial({
        color: 0xCC0000
      }));
      return scene.add(mesh);
    };
    textarea.addEventListener('keyup', update);
    textarea.addEventListener('change', update);
    update();
    window.addEventListener('resize', onresize = function() {
      renderer.setSize(container.clientWidth, container.clientHeight);
      camera.aspect = container.clientWidth / container.clientHeight;
      return camera.updateProjectionMatrix();
    });
    onresize();
    render = function() {
      requestAnimationFrame(render);
      controls.update();
      return renderer.render(scene, camera);
    };
    return render();
  });

}).call(this);
