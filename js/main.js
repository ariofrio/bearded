// Generated by CoffeeScript 1.3.3
(function() {

  require(["csgto/three", "csgto/gmsh", "thirdparty/sugar", "thirdparty/Three", "thirdparty/csg", "thirdparty/FileSaver", "thirdparty/BlobBuilder", "thirdparty/Detector"], function(csgToThree, csgToGmsh) {
    var $, $$, Three, backLight, bottomLight, camera, container, controls, fillLight, keyLight, mesh, onresize, placeholder, render, renderer, scene, solid, textarea, update;
    Three = THREE;
    $ = function(query) {
      return document.querySelector(query);
    };
    $$ = function(query) {
      return document.querySelectorAll(query);
    };
    placeholder = "If this is being used, we've got a problem.";
    textarea = $("textarea");
    container = $("#canvas");
    scene = new Three.Scene;
    renderer = Detector.webgl ? new Three.WebGLRenderer : new Three.CanvasRenderer;
    container.appendChild(renderer.domElement);
    camera = new Three.PerspectiveCamera(45, placeholder, 0.01, 1000);
    camera.position.set(5, 5, 5);
    scene.add(camera);
    controls = new Three.TrackballControls(camera, container);
    keyLight = new Three.DirectionalLight(0xFFFFFF);
    keyLight.position.set(7, 10, 0);
    scene.add(keyLight);
    fillLight = new Three.DirectionalLight(0x666666);
    fillLight.position.set(-5, 7, 4);
    scene.add(fillLight);
    bottomLight = new Three.DirectionalLight(0x666666);
    bottomLight.position.set(7, -5, 4);
    scene.add(bottomLight);
    backLight = new Three.DirectionalLight(0xFFFFFF);
    backLight.position.set(-5, -7, -4);
    scene.add(backLight);
    mesh = null;
    solid = null;
    update = function() {
      var geometry;
      console.log("update");
      solid = new Function(textarea.value)();
      if (mesh != null) {
        scene.remove(mesh);
      }
      geometry = csgToThree(solid);
      mesh = new Three.Mesh(geometry, new Three.MeshLambertMaterial({
        color: 0xCC0000
      }));
      return scene.add(mesh);
    };
    update = update.throttle(250);
    textarea.addEventListener('keyup', update);
    textarea.addEventListener('change', update);
    update();
    window.addEventListener('resize', onresize = function() {
      renderer.setSize(container.clientWidth, container.clientHeight);
      camera.aspect = container.clientWidth / container.clientHeight;
      return camera.updateProjectionMatrix();
    });
    onresize();
    render = function() {
      requestAnimationFrame(render);
      controls.update();
      return renderer.render(scene, camera);
    };
    render();
    return $("#save").addEventListener('click', function() {
      var bb;
      bb = new BlobBuilder;
      bb.append(csgToGmsh(solid));
      return saveAs(bb.getBlob("text/plain;charset=utf-8"), "geometry.geo");
    });
  });

}).call(this);
